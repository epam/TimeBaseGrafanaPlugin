{"version":3,"file":"module.js","mappings":"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","sources":["webpack://epam-timebase-datasource/external amd \"@grafana/data\"","webpack://epam-timebase-datasource/external amd \"@grafana/runtime\"","webpack://epam-timebase-datasource/external amd \"@grafana/ui\"","webpack://epam-timebase-datasource/external amd \"module\"","webpack://epam-timebase-datasource/external amd \"react\"","webpack://epam-timebase-datasource/external amd \"rxjs\"","webpack://epam-timebase-datasource/webpack/bootstrap","webpack://epam-timebase-datasource/webpack/runtime/compat get default export","webpack://epam-timebase-datasource/webpack/runtime/define property getters","webpack://epam-timebase-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://epam-timebase-datasource/webpack/runtime/make namespace object","webpack://epam-timebase-datasource/webpack/runtime/publicPath","webpack://epam-timebase-datasource/./node_modules/grafana-public-path.js","webpack://epam-timebase-datasource/./types.ts","webpack://epam-timebase-datasource/./datasource.ts","webpack://epam-timebase-datasource/./module.ts","webpack://epam-timebase-datasource/./components/ConfigEditor.tsx","webpack://epam-timebase-datasource/./components/QueryEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/epam-timebase-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/epam-timebase-datasource/';\n","import { DataSourceJsonData } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\n\nexport interface MyQuery extends DataQuery {\n  queryText?: string;\n  constant: number;\n}\n\nexport const DEFAULT_QUERY: Partial<MyQuery> = {\n  constant: 6.5,\n};\n\nexport interface DataPoint {\n  Time: number;\n  Value: number;\n}\n\nexport interface DataSourceResponse {\n  datapoints: DataPoint[];\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n  path?: string;\n}\n\n/**\n * Value that is used in the backend, but never sent over HTTP to the frontend\n */\nexport interface MySecureJsonData {\n  apiKey?: string;\n}\n","import { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport {\n  CoreApp,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  createDataFrame,\n  FieldType,\n} from '@grafana/data';\n\nimport { MyQuery, MyDataSourceOptions, DEFAULT_QUERY, DataSourceResponse } from './types';\nimport { lastValueFrom } from 'rxjs';\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  baseUrl: string;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n    this.baseUrl = instanceSettings.url!;\n  }\n\n  getDefaultQuery(_: CoreApp): Partial<MyQuery> {\n    return DEFAULT_QUERY;\n  }\n\n  filterQuery(query: MyQuery): boolean {\n    // if no query has been provided, prevent the query from being executed\n    return !!query.queryText;\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n    const { range } = options;\n    const from = range!.from.valueOf();\n    const to = range!.to.valueOf();\n\n    // Return a constant for each query.\n    const data = options.targets.map((target) => {\n      return createDataFrame({\n        refId: target.refId,\n        fields: [\n          { name: 'Time', values: [from, to], type: FieldType.time },\n          { name: 'Value', values: [target.constant, target.constant], type: FieldType.number },\n        ],\n      });\n    });\n\n    return { data };\n  }\n\n  async request(url: string, params?: string) {\n    const response = getBackendSrv().fetch<DataSourceResponse>({\n      url: `${this.baseUrl}${url}${params?.length ? `?${params}` : ''}`,\n    });\n    return lastValueFrom(response);\n  }\n\n  /**\n   * Checks whether we can connect to the API.\n   */\n  async testDatasource() {\n    const defaultErrorMessage = 'Cannot connect to API';\n\n    try {\n      const response = await this.request('/health');\n      if (response.status === 200) {\n        return {\n          status: 'success',\n          message: 'Success',\n        };\n      } else {\n        return {\n          status: 'error',\n          message: response.statusText ? response.statusText : defaultErrorMessage,\n        };\n      }\n    } catch (err) {\n      let message = '';\n      if (typeof err === 'string') {\n        message = err;\n      } else if (isFetchError(err)) {\n        message = 'Fetch error: ' + (err.statusText ? err.statusText : defaultErrorMessage);\n        if (err.data && err.data.error && err.data.error.code) {\n          message += ': ' + err.data.error.code + '. ' + err.data.error.message;\n        }\n      }\n      return {\n        status: 'error',\n        message,\n      };\n    }\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const { jsonData, secureJsonFields, secureJsonData } = options;\n\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...jsonData,\n        path: event.target.value,\n      },\n    });\n  };\n\n  // Secure field (only sent to the backend)\n  const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onOptionsChange({\n      ...options,\n      secureJsonData: {\n        apiKey: event.target.value,\n      },\n    });\n  };\n\n  const onResetAPIKey = () => {\n    onOptionsChange({\n      ...options,\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        apiKey: false,\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        apiKey: '',\n      },\n    });\n  };\n\n  return (\n    <>\n      <InlineField label=\"Path\" labelWidth={14} interactive tooltip={'Json field returned to frontend'}>\n        <Input\n          id=\"config-editor-path\"\n          onChange={onPathChange}\n          value={jsonData.path}\n          placeholder=\"Enter the path, e.g. /api/v1\"\n          width={40}\n        />\n      </InlineField>\n      <InlineField label=\"API Key\" labelWidth={14} interactive tooltip={'Secure json field (backend only)'}>\n        <SecretInput\n          required\n          id=\"config-editor-api-key\"\n          isConfigured={secureJsonFields.apiKey}\n          value={secureJsonData?.apiKey}\n          placeholder=\"Enter your API key\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>\n    </>\n  );\n}\n","import React, { ChangeEvent } from 'react';\nimport { InlineField, Input, Stack } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport function QueryEditor({ query, onChange, onRunQuery }: Props) {\n  const onQueryTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, queryText: event.target.value });\n  };\n\n  const onConstantChange = (event: ChangeEvent<HTMLInputElement>) => {\n    onChange({ ...query, constant: parseFloat(event.target.value) });\n    // executes the query\n    onRunQuery();\n  };\n\n  const { queryText, constant } = query;\n\n  return (\n    <Stack gap={0}>\n      <InlineField label=\"Constant\">\n        <Input\n          id=\"query-editor-constant\"\n          onChange={onConstantChange}\n          value={constant}\n          width={8}\n          type=\"number\"\n          step=\"0.1\"\n        />\n      </InlineField>\n      <InlineField label=\"Query Text\" labelWidth={16} tooltip=\"Not used yet\">\n        <Input\n          id=\"query-editor-query-text\"\n          onChange={onQueryTextChange}\n          value={queryText || ''}\n          required\n          placeholder=\"Enter a query\"\n        />\n      </InlineField>\n    </Stack>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DEFAULT_QUERY","constant","DataSource","DataSourceApi","getDefaultQuery","_","filterQuery","query","queryText","options","range","from","valueOf","to","data","targets","map","target","createDataFrame","refId","fields","name","values","type","FieldType","time","number","request","url","params","response","getBackendSrv","fetch","baseUrl","length","lastValueFrom","defaultErrorMessage","status","message","statusText","err","isFetchError","error","code","constructor","instanceSettings","super","this","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","jsonData","secureJsonFields","secureJsonData","InlineField","label","labelWidth","interactive","tooltip","Input","id","onChange","event","path","placeholder","width","SecretInput","required","isConfigured","apiKey","onReset","setQueryEditor","onRunQuery","Stack","gap","parseFloat","step"],"sourceRoot":""}