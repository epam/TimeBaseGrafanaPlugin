variables:
  TOOLS_IMAGE: "registry.deltixhub.com/deltix.docker/devops/tools:0.105-master"
  GRADLE_OPTS: "-Dfile.encoding=utf-8"

image: ${TOOLS_IMAGE}

stages:
  - test
  - prepare
  - build
  - publish
#  - pull
  - promote

"Test":
  image: node:12-alpine3.12
  stage: test
  script:
    - yarn install
    - yarn build
  cache:
    key: frontend
    paths:
      - node_modules/
      - dist/
  rules:
    - if: "$CI_COMMIT_MESSAGE !~ /^RobotBuild/"
  tags:
    - kubernetes

"Build":
  image: node:12-alpine3.12
  stage: build
  script:
    - yarn install
    - yarn build
  cache:
    key: frontend
    paths:
      - node_modules/
      - dist/
  artifacts:
    expire_in: 1 hour
    paths:
      - dist/
  rules:
    - if: "$CI_COMMIT_TAG"
  tags:
    - kubernetes

"Publish":
  stage: publish
  cache: {}
  script:
    - zip -r epam-timebase-datasource.zip dist/
    - curl --silent --show-error --fail "https://artifactory.epam.com/artifactory/EPM-RTC/QuantServer/grafana/$CI_COMMIT_TAG/epam-timebase-datasource.zip" --user "$ARTIFACTORY_USER:$ARTIFACTORY_PASS" --upload-file epam-timebase-datasource.zip
  needs:
    - "Build"
  artifacts:
    expire_in: 1 day
    paths:
      - epam-timebase-datasource.zip
  tags:
    - Linux
    - ShellExecutor
  rules:
    - if: "$CI_COMMIT_TAG"

"Promote":
  stage: promote
  cache: {}
  image: amazon/aws-cli:latest
  script:
    - aws s3 cp epam-timebase-datasource.zip "s3://deltix-installers/grafana/epam-timebase-datasource-$CI_COMMIT_TAG.zip"
  needs:
    - "Publish"
  tags:
    - kubernetes
  rules:
    - if: "$CI_COMMIT_TAG"
      when: manual

#"Pull last version":
#  stage: pull
#  cache: {}
#  script:
#    - git fetch --tags
#    - ver=$(git describe --abbrev=0 --tags | cut -f-2 -d '.') || ver=1.0
#    - minor_tag=$(git describe --abbrev=0 --tags | cut -f 3 -d '.') || minor_tag=0
#    - release_tag=${ver}.$((minor_tag))
#    - curl --user "$NEXUS_USER:$NEXUS_PASS" "https://nexus.deltixhub.com/repository/epm-rtc/QuantServer/grafana/$release_tag/epam-timebase-datasource.zip" --output "epam-timebase-datasource.zip"
#    - echo "release_tag=$release_tag" >> pull.env
#  artifacts:
#    expire_in: 1 hour
#    paths:
#      - epam-timebase-datasource.zip
#    reports:
#      dotenv: pull.env
#  tags:
#    - Linux
#    - ShellExecutor
#  only:
#    - /^promote*$/
#
#"Promote latest":
#  stage: promote
#  cache: {}
#  image: amazon/aws-cli:latest
#  script:
#    - aws s3 cp epam-timebase-datasource.zip s3://deltix-installers/grafana/epam-timebase-datasource-${release_tag}.zip
#  needs:
#    - "Pull last version"
#  tags:
#    - kubernetes
#  only:
#    - /^promote*$/

"Prepare":
  stage: prepare
  script:
    - git fetch --tags
    - ver=$(git describe --abbrev=0 --tags | cut -f-2 -d '.') || ver=1.0
    - minor_tag=$(git describe --abbrev=0 --tags | cut -f 3 -d '.') || minor_tag=0
    - release_tag=${ver}.$((minor_tag+1))
    ###### Change version in all files here
    - 'sed -i "s/ \"version\":.*/ \"version\": \"${release_tag}\",/" package.json'
    - 'sed -i "s/epam-timebase-datasource-.*.zip/epam-timebase-datasource-${release_tag}.zip/" README.md'
    ######
    - git remote set-url origin https://$GITLAB_ROBOT_NAME:$CI_GIT_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git
    - git config user.name $GITLAB_ROBOT_NAME
    - git config user.email ${GITLAB_ROBOT_EMAIL}
    - git diff --quiet && git diff --staged --quiet || git commit -am "RobotBuild ${release_tag}"
    - git tag ${release_tag}
    - git push origin HEAD:${CI_COMMIT_REF_NAME} --tags
  cache: {}
  dependencies: []
  tags:
    - kubernetes
  rules:
    - if: "$CI_COMMIT_BRANCH =~ /^release-.*$/ && $CI_COMMIT_MESSAGE !~ /^RobotBuild/"
